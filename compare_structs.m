function compare_structs(s1, s2)% function compare_structs(s1, s2)% compare two nested structs.% intended to compare two converted data files.% rmm Feb 9, 2005%% phase 1: get flattened list of all structure tree fields for easy accessflattened_fieldlist = TraverseStruct(s1(1), [], []);miscount = 0;mismatch = 0;for i = 1:length(flattened_fieldlist)	field = flattened_fieldlist(i, :);		eval(sprintf('data = s1.%s;', field));	try		eval(sprintf('data2 = s2.%s;', field));		if iscell(data)			if ischar(data{1})				aa = strcmp(data, data2);			else				aa = 1;				for i = 1:length(data)					d1 = data{i};					d2 = data{i};					a1 = all(all(d1 == d2));					if a1 ~= 1						aa = 0;					end				end			end		elseif isempty(data)			if isempty(data2)				aa = 1;			else				aa = 0;			end		elseif all(all(isnan(data)))			if all(all(isnan(data2)))				aa = 1;			else				aa = 0;			end		else			data = data(find(~isnan(data)));			data2 = data2(find(~isnan(data2)));			aa = all(all(data == data2));			end	catch		aa = -2;	end	if aa == -2		fprintf('\nField: %s does not exist in s2.\n\n', field);		miscount = miscount + 1;	elseif aa == 0		fprintf('\nField: %s does not match.\n\n', field);		mismatch = mismatch + 1;	endendfprintf('\nMismatch: %d\nMiscount: %d\n\n\n', mismatch, miscount);