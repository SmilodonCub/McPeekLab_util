% convert_spikes.m% function spike_data = convert_spikes (spike_times, timebase_rato, data_length)% converts spike occurrance times to standard spikes vs time array% spike_times = occurrance times of spikes at high sample rate (counter timebase)% timebase_ratio = low speed sample rate / counter timebase% data_length = desired length of output data% JBB 1/27/04function spike_data = convert_spikes (spike_times, timebase_ratio, data_length)spike_data = zeros(data_length, 1);					% initializespike_times = round(spike_times * timebase_ratio);	% reduce to lower timebase% remove spikes that occur at t=0 or after t=data_lengthspike_times(find(~spike_times | spike_times > data_length)) = [];% skip processing if no spikes were recordedif ~isempty(spike_times),	% get unique spike times as well as their original location in array	[spike_times, unique_index] = unique(spike_times);	% if unique index has spacing > 1 (computed by diff), it means there were two (or more)	%  consecutive spikes with the same count. I.e., they occured in the same (e.g. 1) msec	%  time interval. Thus spacing is equivalent to actual spike count.	spike_counts = diff([0; unique_index]);	spike_data(spike_times) = spike_counts;end