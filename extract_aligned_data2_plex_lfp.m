% function [master_struct, all_fields, all_which, wf, wf_done] = extract_aligned_data2_plex_lfp(bvals, bplex, data_fields, align_state, align_range, wf_done)%% This function extracts snippets of data in specified time windows aligned on given events from multiple concatenaated data files% When an extracted plexon (.px) data file that matches a .mat data file is available, neural data are taken from the plexon file.% rmm 03/27/2011 - This version also handles plexon LFPs and allows you to request spike waveforms to analyze spike shape.% Waveform extraction is done once for the entire .px file rather than individually for each data alignment window.% Used by fconvert_set (plexconvert_any).%% based on convert_vals.m% function [master_struct, all_fields, all_which] = convert_vals(bvals, bplex, data_fields, align_state, align_range)% gvals conversion utility% required input:%	loadfile -		experiment data file containing gvals and gpars% optional inputs (program will prompt for these if any are missing or empty):%	savefile -		filename for saving converted data structure%	align_state -	state on which to align trial data (t = 0)%	align_range -	time range over which to save trial data% JBB 2/20/04%% rmm 2/9/04 - modified to accomodate cell arrays of gvals structs (for%	combining multiple data files). Is backward compatible with original version.%function [master_struct, all_fields, all_which, wf, wf_done] = extract_aligned_data2_plex_lfp(bvals, bplex, data_fields, align_state, align_range, wf_done)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ARGUMENT AND USER INPUT HANDLING%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% no arguments: general helpif nargin == 0,	help extract_aligned_data;	returnendif nargin < 2 | isempty(data_fields)	data_fields = {'h_eye', 'v_eye', 'ctr'};end% third argument: state to align data on% number  ok% prompt for state if blank or nonexistentif nargin < 3, align_state = []; endif isempty(align_state),	while isempty(align_state),		align_state = input('Enter the state number to align data on >> ');	endend% fourth argument: alignment interval (prompt if blank or nonexistent)if nargin < 4 align_range = []; endwhile isempty(align_range) | size(align_range, 2) ~= 2,	fprintf('Analysis interval format is [x y] in msec, with alignment state being time zero.\n');	align_range = input('Enter interval >> ');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAIN PROCESSING CODE%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if iscell(bvals)	nblocks = length(bvals);	gvals = bvals{1};	plex = bplex{1};else	nblocks = 1;	gvals = bvals;	plex = bplex;end% phase 2: cycle through fields to check type and expected size% if type is variable length (scalar / vector / matrix) scan all structures to get needed size% after size and type are determined initialize master data structureall_fields = [];all_which = [];master_struct = [];fd_count = 0;fd_next = 0;fud = 0;wf = [];for fd = 1:length(data_fields),	field = data_fields{fd};	    wf_mode = 0;	if strcmp(field, 'plex') == 1		field = 'ctr';		plex_ctr = 1;    elseif strcmp(field, 'plexlfp') == 1        field = 'lfp';        plex_ctr = 1;    elseif strcmp(field, 'plexwf') == 1        field = 'wf';        plex_ctr = 1;        wf_mode = 1;    elseif strcmp(field, 'plexwfall') == 1        field = 'wf';        plex_ctr = 1;        wf_mode = 2;    else		plex_ctr = 0;    end        if wf_mode > 0 && wf_done        continue;    end		if (plex_ctr == 0 & isfield(gvals(1), field)) | plex_ctr == 1		if plex_ctr == 1			eval(sprintf('data = plex(1).%s;', field));	% read field data		else				eval(sprintf('data = gvals(1).%s;', field));	% read field data		end		if iscell(data) & ~ischar(data{1}),				% cell fields			% temp_cellarray = cell(1, length(data));	% match number of data cells (empty for now)			% get sample rates (do not vary trial to trial, so can use later)			% see update_scopewindow.m for notes on data alignment / start times.			if strcmp(field, 'raw'),		% raw channels				sample_rate = gvals(1).misc.raw_rate;			elseif strcmp(field, 'ctr'),	% counter channels				sample_rate = gvals(1).misc.ctr_rate;            elseif strcmp(field, 'plexlfp'),                sample_rate = plex(1).lfp_rate;			else										% eye only 3/4/04				sample_rate = gvals(1).misc.eye_rate;			end			% other alignment variables (some used later)			to_msec = 1000 / sample_rate;			% i.e., msec per sample			to_samples = 1 / to_msec;				% i.e., samples per msec			data_length = length([align_range(1)+to_msec : to_msec : align_range(2)]);			% initialize based on computed data length%			for i = 1:length(data),%				if ~isempty(data{i}),					% initialize all non-empty cells%					temp_cellarray{i} = zeros(data_length, ntrials);%				end%			end%			eval(sprintf('master_struct.%s = temp_cellarray;', field));		% initialize (finish)                % inventory the fields            [a b] = size(data);            if wf_mode == 0                for len1 = 1:a                    for len2 = 1:b                        if strcmp(field, 'ctr')                            if len1 == 1                                if ~isempty(data{len1, len2})                                    fud = fud + 1;                                    all_fields{fud} = 'stim';                                    all_which{fud} = [0 len2];                                end                            else                                if ~isempty(data{len1, len2})                                    fud = fud + 1;                                    all_fields{fud} = 'unit';                                    all_which{fud} = [len1-1 len2];                                end                            end                        else                            if ~isempty(data{len1, len2})                                fud = fud + 1;                                all_fields{fud} = field;                                if strcmp(field, 'lfp')                                    all_which{fud} = [-1 len2];                                else                                    if a == 1 && b == 1                                        all_which{fud} = 1;                                    elseif a == 1                                        all_which{fud} = len2;                                    elseif b == 1                                        all_which{fud} = len1;                                    else                                        all_which{fud} = [len1 len2];                                    end                                end                            end                        end                    end                end            else                if isempty(wf)                    wf = cell(a-1, b);                end                wf_done = 1;            end					% all fields are initialized, so can start loading data			fd_next = fd_count;					master_tr = 0;		% Indexes trials in the final combined struct.			for block = 1:nblocks				if nblocks > 1					gvals = bvals{block};					plex = bplex{block};				end					%				for tr = 1:length(gvals),											% cycle through trials again				for tr = 1:length(plex),											% cycle through trials again					master_tr = master_tr + 1;					if plex_ctr == 1						eval(sprintf('data = plex(tr).%s;', field));				% read field data					else											eval(sprintf('data = gvals(tr).%s;', field));				% read field data					end										states = [gvals(tr).disp_time; gvals(tr).state_time];					fd_count = fd_next;                    [a b] = size(data);                    for len1 = 1:a                        for len2 = 1:b                            if ~isempty(data{len1, len2})                                if wf_mode == 0                                    % freshen variables that depend on trial number                                    if strcmp(field, 'raw'),		% raw channels                                        start_time = gvals(tr).misc.hs_start;                                    elseif plex_ctr == 1                                        start_time = plex(tr).ctr_start;                                    elseif ismember(field, 'ctr'),	% counter channels                                        start_time = gvals(tr).misc.ctr_start(len1);                                    else										% eye only 3/4/04                                        start_time = gvals(tr).misc.ls_start;                                    end                                    align_index = round((states(align_state) - start_time) * sample_rate);                                    % align data vector                                    data{len1, len2} = trial_align2(data{len1, len2}, align_index, round(align_range*to_samples));                                    fd_count = fd_count + 1;                                    master_struct(:, master_tr, fd_count) = data{len1, len2};	% write value                                else                                    wf{len1-1, len2} = [wf{len1-1, len2} data{len1, len2}];                                end                            end                        end                    end				end		% trial type breakdown			end		end			% cycle through trials (second pass)	end 		% field existsend				% cycle through fields