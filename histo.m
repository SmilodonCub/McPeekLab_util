function [zzo, dms, ax] = histo(cat, spk, corr, sig, nolabs)% function zzo = histo(cat, spk, corr, sig, nolabs)% Plots spike density sorted by condition%% cat - (required) is the category for sorting, for example mv.target.direction for different target directions% spk - (required) is nxm array of spike occurrences, where m is number of trials% corr - (optional) is a 1xm boolean argument; if entry i is equal to 1, then trial i is included, otherwise it is excluded (used to exclude incorrect trials, using for example: mv.resp.correct == 1% sig - (optional) allows specification of the sigma for the gaussian kernel used to generate spike density. Default is 10 ms.% nolabs - (optional) if non-zero, suppresses labels on graph indicating color code. Defaults to zero.%zzo = [];dms = [];ax = [];cols = 'obrkgmybr';num_cols = length(cols);if nargin >= 3 && ~isempty(corr)	c1 = find(corr == 1);	cat = cat(c1);	spk = spk(:, c1,:);else	c1 = [1:length(cat)];endif nargin < 4	sig = 10;endif nargin < 5	nolabs = 0;endmulti1 = size(spk,3);mx = 3;my = floor(multi1 ./ 3)+1;spk = double(spk);cats = unique(cat);num_cat = length(cats);hh = ishold;for i = 1:num_cat	zz{i} = find(cat == cats(i));	zzo{i} = c1(zz{i});        for j = 1:multi1        if multi1 > 1            subplot(my, mx, j);        end        if sig ~= 0            [ax(i) dms(:,i)] = uplot(spk(:, zz{i}, j), cols(mod(i, num_cols)+1), sig);        else            mplot(spk(:,zz{i}, j), cols(mod(i, num_cols)+1));        end        if i == 1 & hh == 0            hold on        end        title(num2str(j));    endendif nolabs == 0	xl = get(gca, 'xlim');	yl = get(gca, 'ylim');	xr = xl(2) - xl(1);	yr = yl(2) - yl(1);		for i = 1:num_cat		text(xl(1) + xr * .1, yl(1) + yr .* (i+1) ./ (num_cat+2), [num2str(cats(i)) ' - ' num2str(length(zzo{i}))], 'color', cols(mod(i, num_cols)+1));	endendif hh == 0	hold offend