% spawn_scopewindow.m% function spawn_scopewindow(control_values, spawn_handle)% spawns a new window with one or more scope axes% control_values are desired settings for controls (empty for default)% spawn_handle is current figure, or new figure if == 0)% designed for Rob's data collection system% JBB 1/9/04% internal data organization% figures:			Tag = scope_window	UserData = ***FREE***% axes:				Tag = [plot order]	UserData = averaging data (spikeden only; set on update)% yrange control:	Tag = ylim			UserData = associated axis% channel control:	Tag = channel		UserData = structure with various information (see below)% spike channel gauss width control:	UserData = handle for corresponding channel checkbox% alignment select:	Tag = align_state	UserData = ***FREE***% alignment time:	Tag = align_time	UserData = ***FREE***% colorize menu 1:	Tag = color_params1	UserData = handle of param 2 control% colorize menu 2:	Tag = color_params2	UserData = ***FREE***% sample display:	Tag = downsample	UserData = ***FREE***function spawn_scopewindow(control_values, spawn_handle)global gvals gparsif isempty(gvals)	return;endDEBUG = 1;							% if 1, many objects display their handle on rt-clickFUNC_STR = 'gcbo';					% set debug behaviorBGCOLOR = [0.7 0.7 0.7];			% background color for control labels (gcf = [0.8 0.8 0.8])MAXPLOTS = 4;plot_height = 0.76 / MAXPLOTS;		% vertical space allotted for each plot (axis)align_strings = [gpars.disp_names, gpars.state_names]';% default scope control valuesif isempty(control_values),	control_values(1).yrange = {'[]', '[]', '[]', '[]'};	control_values(1).channels = [1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0];	control_values(1).gausswidth = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 10 4 4 4 0];	control_values(1).aligntime = '[-500 500]';	control_values(1).alignstate = strmatch('Saccade inflight', align_strings);	if isempty(control_values(1).alignstate)		control_values(1).alignstate = 1;	end	control_values(1).colorize = [1 1];	control_values(1).colorize(1) = strmatch('Target.Direction', gpars.colorizable);	if isempty(control_values(1).colorize(1))		control_values(1).colorize(1) = 1;	else		control_values(1).colorize(1) = control_values(1).colorize(1) + 1;	end	control_values(1).colorize(2) = strmatch('Target.Amplitude', gpars.colorizable);	if isempty(control_values(1).colorize(2))		control_values(1).colorize(2) = 1;	else		control_values(1).colorize(2) = control_values(1).colorize(1) + 1;	end	control_values(1).downsample = 3;	control_values(1).included_trials = 5;end%%% USE???? %%%unit_strings = {	'deg', ...					'deg / sec', ...					'deg', ...					'deg / sec', ...					'', ...};nplots = min(sum(control_values.channels), MAXPLOTS);if ~spawn_handle,	% create new figure%	h0 = figure; set(h0, 'units', 'normalized', 'position', [.5587 .2442 .4138 .7117]);	h0 = figure; set(h0, 'units', 'normalized', 'position', [.54 .02 .414 .94]);else				% modify existing figure	h0 = figure(spawn_handle); clf reset;end%%%screen_size = get(0, 'screensize');	% was trying to make figure start from top% identify this figure: Tag = scope_window, UserData = update refresh flag% figure size is const + n * #axesfigpos = get(h0, 'position');								% original positionfig_ht = max(0.18 + nplots * plot_height, figpos(4));		% height of figure (allow larger)%set(h0, 'position', [ figpos(1), 0, figpos(3), fig_ht ]);	% make it start from bottomfigpos = get(h0, 'position');								% new positionset(h0, 'Tag', 'scope_window');% build axis list for fast execution of xrange callback (NOT USED)axlist = zeros(1, nplots);% standardized control sizesstd_width = 0.145;std_height = 0.09 / (nplots + 1);	% adjust for spawned window sizepad = 0.020 / (nplots + 1);			% small spacing value (also adjust)for p = 1:nplots,	% create axis and plot data	% identify this axis: Tag = scope_axis, UserData = default scale (set on update)	axlist(p) = subplot(nplots+1, 1, p);	% save blank axis on bottom for controls	hold on;	set(gca, 'tag', int2str(p), 'ButtonDownFcn', 'grid');	axpos = get(gca, 'position');	axedge = axpos(1) + axpos(3);		% right edge of axis	axtop = axpos(2) + axpos(4);		% top edge of axis	% axis labels	h = title('');	set(h, 'units', 'normalized', 'fontsize', 12, 'fontweight', 'bold');	pos = get(h, 'position');	set(h, 'horizontalalignment', 'left', 'position', [0, pos(2:3)]);%%%	ylabel(unit_strings{p});	% y range label	uipos = [ axedge-2*std_width, axtop+pad, std_width, std_height ];	h=uicontrol('Parent', h0, ...		'Units', 'normalized', ...		'Position', uipos, ...		'BackgroundColor', BGCOLOR, ...		'String', 'Y-axis range', ...		'Fontsize', 12, ...		'Style', 'text' );	% y range control	uipos(1) = uipos(1)+std_width;	if p > length(control_values.yrange), uistring = '[]';	% fill in empty ranges on respawn	else uistring = control_values.yrange{p}; end	h = uicontrol('Parent', h0, ...		'Units', 'normalized', ...		'Position', uipos, ...		'BackgroundColor', [1 1 1], ...		'String', uistring, ...		'Fontsize', 12, ...		'Style', 'edit', ...		'Tag', 'ylim', ...		'UserData', gca, ...		'CallBack', 'change_scale(gcbo)' );	if DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); endend		% generate all plots (axlist finished)% note axpos is now position of bottom axis% x-label bottom axis onlyxlabel('msec');left_edge = axpos(1) + 0.44;	% left edges of subsequent control labels%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% alignment menu label%uipos = [axpos(1), axpos(2)-2.6*std_height, axpos(3), 1.6*pad];% uipos = [ axedge-std_width, axpos(2)-2*std_height, std_width, std_height ];%uipos = [left_edge, axpos(2)-4*std_height, std_width, std_height];uipos = [axpos(1), axpos(2)-2*std_height, std_width * .9, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Alignment', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% alignment menu%uipos(1) = axedge - 1.3*std_width; uipos(3) = 1.3*std_width;uipos(1) = uipos(1) + std_width; uipos(3) = 1.3*std_width;h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', align_strings, ...	'Style', 'popupmenu', ...	'Tag', 'align_state', ...	'Value', control_values.alignstate);	% note: no CB needed to assign valueif DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); end% alignment point label%uipos = [left_edge, axpos(2)-5.5*std_height, 1.2*std_width, std_height];uipos = [left_edge, axpos(2)-2*std_height, 1.2*std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Time range (ms)', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% alignment pointuipos(1) = axedge - std_width; uipos(3) = std_width;h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', [1 1 1], ...	'String', control_values.aligntime, ...	'Value', str2num(control_values.aligntime), ...	'Fontsize', 12, ...	'Style', 'edit', ...	'Tag', 'align_time', ...	'CallBack', 'check_aligntime(gcbo)' );if DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); end% clear traces button -- moved to below.% uipos = [ axedge-std_width, axpos(2)-2*std_height, std_width, std_height ];% uicontrol('Parent', h0, ...% 	'Units', 'normalized', ...% 	'Position', uipos, ...% 	'BackgroundColor', get(h0, 'color'), ...% 	'String', 'Clear traces', ...% 	'Fontsize', 12, ...% 	'Style', 'pushbutton', ...% 	'Callback', 'clear_scopes' );% separation lineuipos = [axpos(1), axpos(2)-2.6*std_height, axpos(3), 1.6*pad];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', [0 0 0], ...	'ButtonDownFcn', 'fprintf(''u r teh dumby looser!!\n'')', ...	'Enable', 'off', ...	'Style', 'frame' );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% channel selector checkboxes (and labels)rows = 8; cols = 3;			% box layout (fixed)row_spc = std_height + pad;	% row spacingcol_spc = std_width;		% column spacingbox_width = 0.04;			% horizontal space allocated for checkboxesi = 1;for c = 1:cols,			% row/col indices used for control layout onlyfor r = 1:rows,	if i <= length(gpars.channelname),		% do not create controls for nonexistent channels					% build checkbox user data		str = gpars.channelname{i}(1:end-1);		% actual field name as stored in gvals		col = str2num(gpars.channelname{i}(end));	% appropriate matrix column (1 for vectors)		gwidth = control_values.gausswidth(i);		% width of convolution gaussian (0 = none)		% get sample rate from gvals (first trial ok -- will not change)		% note: counter channels are converted to the low-speed timebase		% NOTE: NOT ANYMORE! 3/4/04		if strcmp(str, 'Raw'), 			rate = gvals(1).misc.raw_rate;		elseif strcmp(str, 'Ctr'),			rate = gvals(1).misc.ctr_rate;		else			rate = gvals(1).misc.eye_rate;		end		% enable channel only if it is actually being recorded		if gpars.channelselect(i),			enable = 'on';		else			enable = 'off';		end		% checkbox label		uipos = [axpos(1)+(c-1)*col_spc, axpos(2)-2.8*std_height-r*row_spc, std_width, std_height];		uicontrol('Parent', h0, ...			'Units', 'normalized', ...			'Position', uipos, ...			'BackgroundColor', get(h0, 'color'), ...			'String', gpars.channelname{i}, ...			'Fontsize', 12, ...			'HorizontalAlignment', 'left', ...			'Style', 'text' );		% finish checkbox		control_values.channels(i) = control_values.channels(i) & gpars.channelselect(i);		uidata = struct('channel_number', i, 'field_name', str, 'field_col', col, ...						'title_string', gpars.channel_longname{i}, 'sample_rate', rate, ...						'gauss_width', gwidth);		uipos = [uipos(1)-box_width, uipos(2), box_width, std_height];		h = uicontrol('Parent', h0, ...			'Units', 'normalized', ...			'Position', uipos, ...			'BackgroundColor', get(h0, 'color'), ...			'Style', 'checkbox', ...		% note: no CB needed to set value.			'Enable', enable, ...			'Tag', 'channel', ...			'UserData', uidata, ...			'Value', control_values.channels(i) );		if DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); end		% in addition if this is a spike channel add gaussian label and control		if strcmp(str, 'Ctr'),			% control			uipos = [uipos(1)+std_width/1.6, uipos(2), std_width/2, std_height];			h = uicontrol('Parent', h0, ...				'Units', 'normalized', ...				'Position', uipos, ...				'BackgroundColor', get(h0, 'color'), ...				'String', int2str(gwidth), ...				'Fontsize', 12, ...				'Style', 'edit', ...				'Enable', enable, ...				'UserData', h, ...						% handle of associated checkbox				'CallBack', 'change_gauss(gcbo)' );		% changes made in checkbox uidata			if DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); end		end		% if this is a counter channel		i = i+1;	end			% if this is not a nonexistent channelend				% for channel rows and colsend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% downsample display label (note: requires that channels do not fill 3rd column)uipos = [uipos(1), uipos(2) - 1.2*std_height, std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Downsample', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% downsample display controluipos = [uipos(1), uipos(2) - 1.0*std_height, std_width, std_height];h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', {'1x', '2x', '4x', '5x', '8x', '10x'}, ...	'Style', 'popupmenu', ...	'Tag', 'downsample', ...	'Value', control_values.downsample);	% note: no CB needed to assign valueif DEBUG, set(h, 'ButtonDownFcn', FUNC_STR); end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% trials to include% uipos = [left_edge, axpos(2)-4*std_height, std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Included Trials', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% include menuuipos(1) = axedge - 1.3*std_width; uipos(3) = 1.3*std_width;cp1_h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', {'All', 'Triggered', 'Passed', 'Responded', 'Correct'}, ...	'Style', 'popupmenu', ...	'Tag', 'included_trials', ...	'Value', control_values.included_trials);	% note: no CB needed to assign value%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% averaging / color coding options% parameter 1 colorizing menu labeluipos = [left_edge, axpos(2)-7.5*std_height, std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Color param1', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% parameter 1 colorizing menuuipos(1) = axedge - 1.3*std_width; uipos(3) = 1.3*std_width;cp1_h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', [{'none'}; gpars.colorizable'], ...	'Style', 'popupmenu', ...	'Tag', 'color_params1', ...	'Value', control_values.colorize(1), ...	% note: no CB needed to assign value	'Callback', 'set_p2_status(gcbo)' );		% enable / disable param 2 menu as appropriateif DEBUG, set(cp1_h, 'ButtonDownFcn', FUNC_STR); end% parameter 2 colorizing menu labeluipos = [left_edge, axpos(2)-9*std_height, std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Color param2', ...	'HorizontalAlignment', 'left', ...	'Fontsize', 12, ...	'Style', 'text' );% parameter 2 colorizing menuuipos(1) = axedge - 1.3*std_width; uipos(3) = 1.3*std_width;cp2_h = uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', [{'none'}; gpars.colorizable'], ...	'Style', 'popupmenu', ...	'Tag', 'color_params2', ...	'Value', control_values.colorize(2));	% note: no CB needed to assign valueset(cp1_h, 'UserData', cp2_h);				% allow colorizing menu 1 to access colorizing menu 2.if control_values.colorize(1) == 1, set(cp2_h, 'Enable', 'off'); end 	% disable menu 2 by defaultif DEBUG, set(cp2_h, 'ButtonDownFcn', FUNC_STR); end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% update scopes buttonuipos = [left_edge, axpos(2)-12.5*std_height, 1.2*std_width, std_height];uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'UPDATE', ...	'Fontsize', 12, ...	'Style', 'pushbutton', ...	'Callback', 'offline_update_scopewindow(get(gcbo, ''parent''))' );% clear scopes buttonuipos(1) = axedge - std_width;uipos(2) = uipos(2) + 1.5*std_height;uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Clear traces', ...	'Fontsize', 12, ...	'Style', 'pushbutton', ...	'Callback', 'clear_scopes' );	% spawn new button -- no longer used.% uicontrol('Parent', h0, ...% 	'Units', 'normalized', ...% 	'Position', uipos, ...% 	'BackgroundColor', get(h0, 'color'), ...% 	'String', 'SPAWN NEW', ...% 	'Fontsize', 12, ...% 	'Style', 'pushbutton', ...% 	'Callback', 'spawn_scopewindow(struct([]), 0)' );% spawn 2-D scope button (brings to front if already exists) -- no longer used% uipos(2) = uipos(2) + 1.5*std_height;% uicontrol('Parent', h0, ...% 	'Units', 'normalized', ...% 	'Position', uipos, ...% 	'BackgroundColor', get(h0, 'color'), ...% 	'String', 'SPAWN 2-D', ...% 	'Fontsize', 12, ...% 	'Style', 'pushbutton', ...% 	'Callback', 'spawn_2Dscope' );% hold scope window button uipos(1) = left_edge;uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'HOLD', ...	'Fontsize', 12, ...	'Style', 'togglebutton', ...	'Callback', 'freeze_scope(gcbo)' );	% Clear all scopes buttonuipos(1) = axedge - std_width;uipos(2) = axpos(2)-12.5*std_height;uicontrol('Parent', h0, ...	'Units', 'normalized', ...	'Position', uipos, ...	'BackgroundColor', get(h0, 'color'), ...	'String', 'Clear All Scopes', ...	'Fontsize', 12, ...	'Style', 'pushbutton', ...	'Callback', 'DoClearAllScopes' );%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%udd.gpars = gpars;udd.gvals = gvals;set(h0, 'UserData', udd);offline_update_scopewindow(h0);		% automatically self-update when first created