function [match_log, dropped_trials] = plex_preprocess(cellname, filenum)% function [match_log, dropped_trials] = plex_preprocess(cellname, filenum)%% (Formerly called: plex_merge_dir)%% Gets plexon data from a central repository directory and merges it with selected .mat files % in the current directory to produce .px files.% Calls plex_open_file, plex_get_trial_lfp2, plex_replace_trial_lfp2%% - Give it the name of a cell and a list of file ##s to merge, or if filenum is omitted, % it does all the cell's files in the direction.%% - If cellname is omitted, it prompts for a .mat file and does just that file (if given filenum is [])% or that file + the listed file ##s. %% - If neither  cellname nor file## is given, then it prompt and does all the cell's files in% the current directory (this is usually the desired outcome).%% Output:% match_log - Returns a list of the cell names that were successfully processed.% dropped trials -  should normally be empty -- this identifies individual trials that could not %                   be processed for some reason.%% rmm 03/27/2011 - updated for LFPs and waveforms.%if nargin < 2	filenum = [];endif nargin < 1 || isempty(cellname)	[matname, pathname] = uigetfile('*.mat', 'Select a mat file');	if ~ischar(matname)		return	end	zz = findstr(matname, '_');	if isempty(zz)		return	end	cellname = matname(1:zz(1)-1);	if nargin >= 2 && isempty(filenum)		filenum = str2num(matname(end-5:end-4));	endendmatch_log = [];savedir = pwd;fprintf('Looking for plexon data file for %s\n', cellname);%cd 'macintosh hd:users:rmm:documents:data:plexon_finished:'cd '/users/rmm/documents/data/plexon_finished/'d = dir;[allnames{1:length(d)}] = deal(d.name);lower_allnames = lower(allnames);matchnames = allnames(strmatch(lower(cellname), lower_allnames));if isempty(matchnames)	fprintf(['Couldn''t find plx file ' cellname '\n']);	cd(savedir);	returnend% make sure we get most recent sort.lower_matchnames = lower(matchnames);% remove .plx suffix in order to sort filenames accuratelyfor i = 1:length(lower_matchnames)    if strcmp('.plx', lower_matchnames{i}(end-3:end)) == 1        lower_matchnames{i} = lower_matchnames{i}(1:end-4);    endend[x ind] = sort(lower_matchnames);filename_ind = ind(end);% this is no longer necessary since we got rid of .plx suffix% if length(x) > 1 && length(x{end})-4 == length(cellname)%     filename_ind = ind(end-1);% endfilename = matchnames{filename_ind}[channel_count unit_count lfp_count] = plex_get_channel_unit_count(filename);if lfp_count > 0 && lfp_count ~= channel_count    warning('plex_preprocess assumes that if LFPs exist, the number of saved LFPs equals the number of saved channels of unit data.');    channel_count = max(channel_count, lfp_count);end[fid header fname pathname] = plex_open_file(filename);if fid == -1	returnendcd(savedir);% Get monkey ID / track / cell prefix (everything before first underscore)zz = findstr(fname, '.');if isempty(zz)	input('Enter prefix (e.g., ff1101) >', prefix);else	prefix = lower(fname(1:zz-1));end% Get rid of any -aligned or -## suffixes, if present (-## suffix indicates a re-sort)zz = strfind(prefix, '-aligned');if ~isempty(zz)    prefix = [prefix(1:zz-1) prefix(zz+8:end)];endif strcmp(prefix(end-2), '-') == 1	prefix = prefix(1:end-3);%	fprintf('Truncating cell name to %s.\n', prefix);end	current_mat_filenum = 0;current_mat_filename = [];current_mat_trial = 0;max_trials = 0;base_trialnum = 0;prev_plex_trial = 0;vcount = 0;fcount = 0;predata = [];% debugging%dcount = 0;skip = 0;done = 0;while done == 0% 	if ~isempty(predata) & predata(2) == 7% 		keyboard% 	end	% Load next plexon trial	[spk event predata trialsave lfp lfp_starttime lfp_freq waves] = plex_get_trial_lfp2(fid, header, channel_count, unit_count, lfp_count);    %	[spk event predata trialsave lfp lfp_starttime lfp_freq] = plex_get_trial_lfp(fid, header);%	[spk event predata trialsave] = plex_get_trial(fid, header);	% for debuggging%	dcount = dcount + 1;%	save_predata(dcount,:) = predata;%	save_trialsave(dcount) = trialsave;		% If plexon file is finished:	if event(1) < 0		if skip == 0			if current_mat_filenum ~= 0				if current_mat_trial < max_trials					warning(['Some trials missing from plexon file ' current_mat_filename ' ' num2str(current_mat_filenum) ' ' num2str(current_mat_trial) ' ' num2str(max_trials)]);					dropped_trials{fcount} = [dropped_trials{fcount} trls(vcount+1:end)];				end							% Save last file.				fprintf('\nSaving %d trials to %s.\n', current_mat_trial, [current_mat_filename(1:end-4) '.px']);				dropped = dropped_trials{fcount};				save([current_mat_filename(1:end-4) '.px'], 'plex', 'dropped');				clear gvals gpars plex			end			fprintf('Finished.\n');		end		done = 1;			% If it's a saved trial:	elseif trialsave			% Check if we started a new .mat file.		if predata(1) ~= current_mat_filenum			if skip == 0 & current_mat_filenum ~= 0				if current_mat_trial < max_trials					warning(['Plexon went to next file before completing all trials ' current_mat_filename ' ' num2str(current_mat_filenum) ' ' num2str(current_mat_trial) ' ' num2str(max_trials) ' ' num2str(predata(1)) ' ' num2str(predata(2))]);					dropped_trials{fcount} = [dropped_trials{fcount} trls(vcount+1:end)];				end							% Save out old file.				fprintf('\nSaving %d trials to %s.\n', current_mat_trial, [current_mat_filename(1:end-4) '.px']);				dropped = dropped_trials{fcount};				save([current_mat_filename(1:end-4) '.px'], 'plex', 'dropped');				clear gvals gpars plex			end					% should only happen if you start new cell on mac and forget to change plexon.			if predata(1) < current_mat_filenum				warning(['Plexon file number decreased. Probably belongs to another cell.']);				keyboard				[current_mat_filename, pathname] = uigetfile('*.mat', 'Select a mat file');				current_mat_filenum = predata(1);			else				% Open new mat file, reset current trialnum and base trialnum.				current_mat_filenum = predata(1);				current_mat_filename = match_filename(prefix, current_mat_filenum);			end			fcount = fcount + 1;			dropped_trials{fcount} = [];			if isempty(current_mat_filename) | (~isempty(filenum) & filenum ~= current_mat_filenum)				fprintf('$');				skip = 1;			else				fprintf('\n');				skip = 0;				match_log{fcount} = current_mat_filename;				fprintf('Loading %s\n', current_mat_filename);				load(current_mat_filename);				current_mat_trial = 0;				base_trialnum = 0;				prev_plex_trial = 0;				vcount = 0;								% extract all trial numbers				if ~isempty(gvals)					trls = zeros(length(gvals),1);					for i = 1:length(gvals)						trls(i) = gvals(i).trialnum;					end					max_trials = trls(end);				else					trls = [];					max_trials = 0;				end			end		end			if skip ~= 1			if predata(2) < prev_plex_trial				base_trialnum = base_trialnum + 255			end			prev_plex_trial = predata(2);			trial = predata(2) + base_trialnum;						if trial < current_mat_trial				error(['Problem with trial ordering ' current_mat_filename ' ' num2str(current_mat_filenum) ' ' num2str(current_mat_trial) ' ' num2str(max_trials) ' ' num2str(predata(1)) ' ' num2str(predata(2))]);			end				current_mat_trial = trial;			% Find trial in .mat file corresponding to current plexon trial.			vi = find(trls == current_mat_trial);			if ~isempty(vi)				fprintf('.', trial);				vcount = vcount + 1;				if vcount ~= vi					while vcount < vi						fprintf('Trial counter mis-match');						dropped_trials{fcount} = [dropped_trials{fcount} trls(vcount)];						vcount = vcount + 1;					end				end				% Put plexon data in appropriate field.				plex(vi) = plex_replace_trial_lfp2(gvals(vi), spk, event, fname, lfp, lfp_starttime, lfp_freq, waves, channel_count, unit_count, lfp_count);                %				plex(vi) = plex_replace_trial_lfp(gvals(vi), spk, event, fname, lfp, lfp_starttime, lfp_freq);%				plex(vi) = plex_replace_trial(gvals(vi), spk, event, fname);			else				fprintf('Skipped trial %d\n', trial);			end		end	else		% (stopped and re-ran a trial -- this leads to repeated trials numbers in plexon file.)	endendfunction filename = match_filename(prefix, num)w = what;plen = length(prefix);snum = sprintf('%02d', num);slen = length(snum);filename = [];for i = 1:length(w.mat)	if length(w.mat{i}) >= plen && strcmp(w.mat{i}(1:plen), prefix) == 1 && strcmp(w.mat{i}(end-slen+1-4:end-4), snum) == 1		filename = w.mat{i};		return;	endend